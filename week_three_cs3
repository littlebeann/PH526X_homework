import numpy as np, random, scipy.stats as ss

def majority_vote_fast(votes):
    mode, count = ss.mstats.mode(votes)
    return mode

def distance(p1, p2):
    return np.sqrt(np.sum(np.power(p2 - p1, 2)))

def find_nearest_neighbors(p, points, k=5):
    distances = np.zeros(points.shape[0])
    for i in range(len(distances)):
        distances[i] = distance(p, points[i])
    ind = np.argsort(distances)
    return ind[:k]

def knn_predict(p, points, outcomes, k=5):
    ind = find_nearest_neighbors(p, points, k)
    return majority_vote_fast(outcomes[ind])[0]

import pandas as pd

#exercise 1
data = pd.read_csv("asset-v1-HarvardX+PH526x+2T2019+type@asset+block@wine.csv", index_col=0)
print(data.head)

#exercise 2 
color_of_wine = list(data["color"])
is_red_column_data = []
for color in color_of_wine:
    if color == "red":
        is_red_column_data.append(1)
    if color == "white":
        is_red_column_data.append(0)
data["is_red"] = list(is_red_column_data)
numeric_data = data.drop(columns = ["color","quality", "high_quality"])

#exercise 3
from sklearn import preprocessing
scaled_data = preprocessing.scale(numeric_data)
numeric_data = pd.DataFrame(data = scaled_data, columns = numeric_data.columns)

from sklearn import decomposition
pca = decomposition.PCA(n_components = 2)
principal_components = pca.fit_transform(numeric_data)

#exercise 4
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from matplotlib.backends.backend_pdf import PdfPages
observation_colormap = ListedColormap(['red', 'blue'])
x = principal_components[:,0]
y = principal_components[:,1]

plt.title("Principal Components of Wine")
plt.scatter(x, y, alpha = 0.2,
    c = data['high_quality'], cmap = observation_colormap, edgecolors = 'none')
plt.xlim(-8, 8); plt.ylim(-8, 8)
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.show()

#exercise 5
import numpy as np 
np.random.seed(1) # do not change this!

x = np.random.randint(0, 2, 1000)
y = np.random.randint(0 ,2, 1000)

def accuracy(predictions, outcomes):
    count = 0
    for i in range (len(predictions)):
        if predictions[i] == outcomes [i]:
            count +=1
    return count/len(predictions)*100

print(accuracy (x,y))

#exercise 6
data_high_quality_list = list(data["high_quality"])
data_all_zeros = list(np.zeros(len(data_high_quality_list)))
print(accuracy (data_high_quality_list, data_all_zeros))

#exercise 7 
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(numeric_data, data['high_quality'])
library_predictions = knn.predict(numeric_data)
print(accuracy(library_predictions,data_high_quality_list))

#exercise 8
n_rows = data.shape[0]
random.seed(123)
selection = random.sample(range(n_rows),10)
print(selection)

#exercise 9 
predictors = np.array(numeric_data)
training_indices = [i for i in range(len(predictors)) if i not in selection]
outcomes = np.array(data["high_quality"])

my_predictions = np.array([])
for p in predictors[selection]:
    my_predictions = np.append(my_predictions, knn_predict(p, predictors[training_indices,:], outcomes[training_indices], k=5))
print(data.high_quality.iloc[selection])
percentage = accuracy(my_predictions, list(data.high_quality.iloc[selection]))

print(percentage)
